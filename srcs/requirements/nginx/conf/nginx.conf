#Nginx 전체 설정 파일

#웹 서버의 보안을 강화하기 위한 설정
#www-data 사용자는 웹 콘텐츠 디렉토리에만 쓰기 권한을 가지고, 다른 시스템 영역에는 제한된 접근 권한을 가집니다.
# root가 아닌 사용자만 그리고 www-data 최소한의 권한만 부여 : this is old way
# user www-data; 

# will do the same action as www-data : new and better way
user nginx;

# CPU 코어 수에 따라 자동 조정
# 서버 리소스를 효율적으로 활용합니다.
# 일반적으로 4개의 워커 프로세스가 생성
worker_processes auto;                

# Nginx가 실행될 때 자신의 마스터 프로세스 ID 번호를 /run/nginx/nginx.pid 파일에 기록하라고 지시
#시스템이나 관리자가 실행 중인 Nginx 프로세스를 식별하고 제어하는 데 사용
pid /run/nginx/nginx.pid;                # PID 파일 위치

# 이벤트 설정
events {
    #ulimit -n 명령으로 확인할 수 있는 파일 디스크립터 제한보다 작아야 함
    worker_connections 1024;             # 워커 프로세스당 최대 연결 수 (보통 1024)

    #  대량의 동시 연결을 효율적으로 처리 select, poll 보다 상위 성능
    use epoll;                           # epoll 사용 (성능 향상)

    # 초당 많은 수의 새로운 연결이 발생하는 고트래픽 웹사이트
    #특히 부하가 높거나 변동이 심한 웹 서버에서 성능을 최적화하는 데 도움이 되는 설정
    multi_accept on;                     # 한 번의 이벤트 알림에서 여러 연결 수락 (성능 향상)
}

# HTTP 설정 :optimizes NGINX for better performance, security, and compression.
http {
    # 기본 설정
    include /etc/nginx/mime.types;       # MIME 타입 설정


    #If a file has no known MIME type, NGINX forces a download using application/octet-stream.
    #application/octet-stream is the default MIME type for unknown files.
        # This tells the browser:

        # "This is just raw binary data."
        # "You probably need to download it instead of displaying it."
    default_type application/octet-stream;
    
    # <성능 최적화>
    # 파일 전송 최적화 : File Transmission Optimization
    # Uses efficient kernel file transmission (faster than normal reads/writes).
    sendfile on;           

    # TCP 패킷 최적화
    # Good for large file transfers (e.g., images, videos, CSS, JS).
    # Sends full packets instead of small chunks, improving performance.
    #Reduces TCP Overhead : EACH OF SMALL PACKETS HAS ITS OWN TCP HEADER THAT IS EXTRA DATA
    # TCP waits until the buffer is full, reducing the number of packets. 
    #   BEFORE : [Header][Data-1]  → [Header][Data-2]  → [Header][Data-3] 
    #   AFTER  : [Header][Data-1 + Data-2 + Data-3]
    tcp_nopush on;             
    
    # 작은 패킷 지연 방지   
    # Ensures small packets (like HTTP headers) are sent immediately. 
    # TCP waits to gather small packets into a larger one, small packets like HTTP headers are sent immediately.       
    tcp_nodelay on; 

    # 연결 유지 시간
    #  Keeps connections open for 65 seconds to allow re-use (reduces CPU usage).
        # Each request requires a new TCP handshake.
        # The same client and server keep reconnecting.
    keepalive_timeout 65;                
    types_hash_max_size 2048;

     # Nginx 버전 숨김 (보안)
     # By default, NGINX provides "server tokens" (metadata) in HTTP responses
        #The server type (NGINX)
        # The NGINX version number
        # Additional information in error pages
    # Attackers might exploit known vulnerabilities in specific NGINX versions.
    server_tokens off;                  
    
 

    # 큰 파일 업로드 허용 :: (Required for file uploads in WordPress or APIs).
    client_max_body_size 64m; 
    # 버퍼 설정 
        # If client_body_buffer_size is too small, large requests will be written to disk more often.
        # Frequent disk writes slow down the server and increase disk usage.
        # Increasing the buffer (e.g., 512k or 1m) can reduce disk I/O and improve performance.
    client_body_buffer_size 128k;
    
    # Gzip 압축
    # gzip on;
    # gzip_comp_level 5;
    # gzip_min_length 256;
    # gzip_proxied any;
    # gzip_vary on;
    # gzip_types
    #     application/atom+xml
    #     application/javascript
    #     application/json
    #     application/ld+json
    #     application/manifest+json
    #     application/rss+xml
    #     application/vnd.geo+json
    #     application/vnd.ms-fontobject
    #     application/x-font-ttf
    #     application/x-web-app-manifest+json
    #     application/xhtml+xml
    #     application/xml
    #     font/opentype
    #     image/bmp
    #     image/svg+xml
    #     image/x-icon
    #     text/cache-manifest
    #     text/css
    #     text/plain
    #     text/vcard
    #     text/vnd.rim.location.xloc
    #     text/vtt
    #     text/x-component
    #     text/x-cross-domain-policy;
# ---------------------------------------------------------------
# 서버 설정시 nginx는 여러개의 서버 블록을 가질 수 있음

# 각 서버 블록은 하나의 도메인 또는 IP 주소에 대한 설정을 가짐

# 서브도메인으로 서버 블록을 나누어 설정할 수 있음
# www.example.com, blog.example.com, api.example.com 등 서브도메인에 따라 다른 설정을 할 수 있음
# 프론트엔드 (React, Vue 등)
# server {
#     listen 80;
#     server_name web.example.com;

#     location / {
#         root /var/www/frontend;
#         index index.html;
#         try_files $uri /index.html;
#     }
# }

# # 백엔드 API (Node.js)
# server {
#     listen 5000;
#     server_name api.example.com;

#     location / {
#         proxy_pass http://localhost:3000;  # 백엔드 서버
#     }
# }

# 도메인 또는 포트 번호에 따라 다른 서버 블록을 사용할 수 있음
# 서버 블록은 여러 개의 location 블록을 가질 수 있음
# location 블록은 특정 URL 경로에 대한 설정을 가짐 : 즉 www.example.com/about 경로에 대한 설정을 따로 할 수 있음

    # # HTTP 연결 거부 (보안 강화)
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name _;
    #     return 301 https://$host$request_uri;  # HTTP → HTTPS 리다이렉트
    # }
    
    # HTTPS 서버 설정
    server {
        listen 443 ssl http2; # HTTP/2 활성화로 성능 향상
        listen [::]:443 ssl http2; #IPv6 주소에도 동일한 설정 적용
        
        #Nginx 설정 파일에서 환경 변수 확장 안하고 다이렉트로 읽어버림.
        # server_name ${DOMAIN_NAME};   # 도메인 이름 설정 ..이렇게 못해
        server_name skwon2.42.fr     
        # SSL 설정
        ssl_protocols TLSv1.2 TLSv1.3; # 보안강화된 최신 프로토콜만 사용
        # ssl_certificate ${SSL_CERTS}certificate.crt;
        # ssl_certificate_key ${SSL_CERTS}certificate.key;
        ssl_certificate /etc/nginx/ssl/certificate.crt;
        ssl_certificate_key /etc/nginx/ssl/certificate.key;
        ssl_session_timeout 1d; # ssl 핸드세이크 컴퓨팅 자원 소모 많음 그렇기에 하루 유지
        
        #SSL 세션 정보를 10MB 크기의 공유 메모리에 저장
        #여러 워커 프로세스가 세션 정보를 공유할 수 있어 캐시 효율이 높아
        ssl_session_cache shared:SSL:10m;

        #세션 티켓은 SSL 세션을 빠르게 재개하는 방법이지만, 잘못 구현될 경우 보안 취약점이 될 수 있음
        ssl_session_tickets off;
########################################################################

# SSL 세션 작동 방식:

# 클라이언트와 서버가 처음 연결할 때 복잡한 SSL 핸드셰이크를 수행합니다.
# 핸드셰이크가 성공하면 서버는 이 연결에 대한 "세션 ID"를 생성합니다.
# 서버는 이 세션 ID와 협상된 암호화 매개변수를 메모리에 저장합니다.
# 서버는 세션 ID를 클라이언트에게 전송합니다.
# 클라이언트가 나중에 다시 연결할 때, 이 세션 ID를 서버에 제시합니다.
# 서버는 ID를 확인하고, 유효하면 전체 핸드셰이크를 생략하고 빠르게 암호화 통신을 재개합니다.

# SSL 세션 캐시:

# 서버 측에 위치합니다(클라이언트가 아님).
# 여러 세션 ID(각 클라이언트들)와 관련 암호화 매개변수(어떻게암호화 할지 약속)를 저장하는 메모리 공간입니다.
# shared:SSL:10m은 10MB 크기의 공유 메모리 영역을 할당한다는 의미입니다.
# Nginx의 여러 워커 프로세스가 이 캐시에 접근할 수 있어 효율성이 높아집니다.

# 따라서 세션 정보는 서버에 저장되고, 클라이언트는 세션 ID만 저장하여 재연결 시 이를 서버에 제시합니다. 
# 서버의 세션 캐시에서 일치하는 세션 정보를 찾으면 빠른 재연결이 가능합니다.

########################################################################
        # 현대적인 TLS 설정 :: 클라이언트가 선호하는 암호화 방식을 사용하도록 설정 (통 좋은 암호화 방식을 선호하므로 권장)
        ssl_prefer_server_ciphers off;
        
        # OCSP Stapling : 
        #SSL 인증서의 유효성(취소 여부)을 확인하는 방법 중 하나로, 
        #인증서 발급기관(CA)가 제공하는 OCSP 서버에 직접 요청하여 인증서의 유효성을 확인하는 방법 (클라이언트에서 수행했음)
        # "이 인증서가 신뢰할 수 있는지"를 검증하는 과정을 클라이언트가 직접 수행하지 않고, 
        #서버가 대신 수행하여 클라이언트에게 제공하는 기능 : 연결속도가 빨라져
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # 보안 헤더
        # These headers improve security by reducing XSS (Cross-Site Scripting) and Clickjacking risks.
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # 루트 디렉토리 및 기본 파일 :  wordpress_vol
        root /var/www/html;  # <-- This sets $document_root
        index index.php index.html; #first check php, if there is not look for html
        
        # 기본 위치 설정


# URL (Uniform Resource Locator) - identifies the resource and how to access it (e.g., https://example.com/page)
#  location / : will take  any path from  the root/ unless you specify 
# root : www.skwon2.kr.fr
# sub : www.skwon2.kr.fr/profile
# then /profile will be URI

# in where the wp volume : /var/www/html/wp-content
# /first look for file : $uri
# /for directory : $uri/
# /no exist?then request with a query($args) to INDEX.php ex) /index.php?blog/post-123 like thiis
    # (index.php acts as the main entry point (or "router") for all PHP requests.)
    #to check the file in the database  : /index.php?$args
    # this one is for the dynamic php files that needs to operate with database to apply any changes,
    # so it does not have physical static files of php:  so php has to look for it in the database

# if there is no file at all then PHP will responses 404 or other related error
# if you want php to dynamically create the file you can but need more code
# /profile?user=123은 /index.php?user=123으로 전달
        location / {
            try_files $uri $uri/ /index.php?$args;
        }
        
#이 설정은 NGINX가 PHP 파일을 처리하는 방법을 정의합니다.
# 특히, **PHP-FPM(FastCGI Process Manager)**와 연동하여 PHP를 실행하는 역할을 합니다.

# \.php$ : .php로 끝나는 모든 요청을 처리하도록 설정
# PHP 실행이 필요한 URL을 PHP-FPM(FastCGI 서버)로 전달하기 위해 필요
#  (Handles Only .php Files)
        location ~ \.php$ {
            # Through $uri check, no $uri exist then just sent 404 from nginx. (checking only form static php)
            try_files $uri /index.php = 404;

            #	PHP 파일과 추가 경로 분리
                #  script.php is the PHP file.
                # /extra/path is additional data (used in frameworks like Laravel).
            fastcgi_split_path_info ^(.+\.php)(/.+)$; 

            #: PHP-FPM 서비스 연결 (필수) port 9000, which is the default for PHP-FPM

            fastcgi_pass inception_wordpress:9000; 

             # 디렉토리 요청 시 index.php 실행 
            fastcgi_index index.php;



             #PHP 실행을 위한 환경 변수 설정 : mports default environment variables that PHP needs to function.
            include fastcgi_params;

            # PHP 파일 경로 전달 : Ensures PHP knows which script to execute.
                # $document_root → The root directory (/var/www/html).
                # $fastcgi_script_name → The requested file (/index.php or /script.php).
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            
            
            #	추가 경로 정보 전달 :  Passes additional path info to PHP.
            fastcgi_param PATH_INFO $fastcgi_path_info;


            #PHP 오류를 NGINX가 처리하도록 설정
                # If a PHP script throws an error, NGINX can return a custom error page instead of showing the raw error.
                # Improves security by hiding PHP errors from users.
                # Prevents sensitive information from being leaked.
            fastcgi_intercept_errors on;

            #PHP 응답 속도 최적화 : Optimizes performance for large PHP responses.
            fastcgi_buffer_size 128k;
            fastcgi_buffers 4 256k;
            fastcgi_busy_buffers_size 256k;
        }
        
        # 정적 파일 캐싱
        # 이미지, CSS, JS 파일에 대한 캐싱으로 로딩 속도 향상
        # 선택적이지만 성능 향상에 큰 도움이 됨
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform"; # acan be cached by any cache, prevent caches or proxies that will modifying the original file
        }
    }
}