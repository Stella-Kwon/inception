#Nginx 전체 설정 파일

#웹 서버의 보안을 강화하기 위한 설정
#www-data 사용자는 웹 콘텐츠 디렉토리에만 쓰기 권한을 가지고, 다른 시스템 영역에는 제한된 접근 권한을 가집니다.
# root가 아닌 사용자만 그리고 www-data 최소한의 권한만 부여
user www-data; 

# CPU 코어 수에 따라 자동 조정
# 서버 리소스를 효율적으로 활용합니다.
# 일반적으로 4개의 워커 프로세스가 생성
worker_processes auto;                

# Nginx가 실행될 때 자신의 마스터 프로세스 ID 번호를 /run/nginx/nginx.pid 파일에 기록하라고 지시
#시스템이나 관리자가 실행 중인 Nginx 프로세스를 식별하고 제어하는 데 사용
pid /run/nginx/nginx.pid;                # PID 파일 위치

# 이벤트 설정
events {
    #ulimit -n 명령으로 확인할 수 있는 파일 디스크립터 제한보다 작아야 함
    worker_connections 1024;             # 워커 프로세스당 최대 연결 수 (보통 1024)

    #  대량의 동시 연결을 효율적으로 처리 select, poll 보다 상위 성능
    use epoll;                           # epoll 사용 (성능 향상)

    # 초당 많은 수의 새로운 연결이 발생하는 고트래픽 웹사이트
    #특히 부하가 높거나 변동이 심한 웹 서버에서 성능을 최적화하는 데 도움이 되는 설정
    multi_accept on;                     # 한 번의 이벤트 알림에서 여러 연결 수락 (성능 향상)
}

# HTTP 설정
# http {
#     # 기본 설정
#     include /etc/nginx/mime.types;       # MIME 타입 설정
#     default_type application/octet-stream;
    
#     # 성능 최적화
#     sendfile on;                         # 파일 전송 최적화
#     tcp_nopush on;                       # TCP 패킷 최적화
#     tcp_nodelay on;                      # 작은 패킷 지연 방지
#     keepalive_timeout 65;                # 연결 유지 시간
#     types_hash_max_size 2048;
#     server_tokens off;                   # Nginx 버전 숨김 (보안)
    
#     # 버퍼 설정
#     client_max_body_size 64m;            # 큰 파일 업로드 허용
#     client_body_buffer_size 128k;
    
#     # Gzip 압축
#     gzip on;
#     gzip_comp_level 5;
#     gzip_min_length 256;
#     gzip_proxied any;
#     gzip_vary on;
#     gzip_types
#         application/atom+xml
#         application/javascript
#         application/json
#         application/ld+json
#         application/manifest+json
#         application/rss+xml
#         application/vnd.geo+json
#         application/vnd.ms-fontobject
#         application/x-font-ttf
#         application/x-web-app-manifest+json
#         application/xhtml+xml
#         application/xml
#         font/opentype
#         image/bmp
#         image/svg+xml
#         image/x-icon
#         text/cache-manifest
#         text/css
#         text/plain
#         text/vcard
#         text/vnd.rim.location.xloc
#         text/vtt
#         text/x-component
#         text/x-cross-domain-policy;
# ---------------------------------------------------------------
# 서버 설정시 nginx는 여러개의 서버 블록을 가질 수 있음

# 각 서버 블록은 하나의 도메인 또는 IP 주소에 대한 설정을 가짐

# 서브도메인으로 서버 블록을 나누어 설정할 수 있음
# www.example.com, blog.example.com, api.example.com 등 서브도메인에 따라 다른 설정을 할 수 있음
# 프론트엔드 (React, Vue 등)
# server {
#     listen 80;
#     server_name web.example.com;

#     location / {
#         root /var/www/frontend;
#         index index.html;
#         try_files $uri /index.html;
#     }
# }

# # 백엔드 API (Node.js)
# server {
#     listen 5000;
#     server_name api.example.com;

#     location / {
#         proxy_pass http://localhost:3000;  # 백엔드 서버
#     }
# }

# 도메인 또는 포트 번호에 따라 다른 서버 블록을 사용할 수 있음
# 서버 블록은 여러 개의 location 블록을 가질 수 있음
# location 블록은 특정 URL 경로에 대한 설정을 가짐 : 즉 www.example.com/about 경로에 대한 설정을 따로 할 수 있음

    # # HTTP 연결 거부 (보안 강화)
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name _;
    #     return 301 https://$host$request_uri;  # HTTP → HTTPS 리다이렉트
    # }
    
    # HTTPS 서버 설정
    server {
        listen 443 ssl http2; # HTTP/2 활성화로 성능 향상
        listen [::]:443 ssl http2; #IPv6 주소에도 동일한 설정 적용
        
        #Nginx 설정 파일에서 환경 변수 확장 안하고 다이렉트로 읽어버림.
        # server_name ${DOMAIN_NAME};   # 도메인 이름 설정 ..이렇게 못해
        server_name skwon2.42.fr     
        # SSL 설정
        ssl_protocols TLSv1.2 TLSv1.3; // 보안강화된 최신 프로토콜만 사용
        # ssl_certificate ${SSL_CERTS}certificate.crt;
        # ssl_certificate_key ${SSL_CERTS}certificate.key;
        ssl_certificate /etc/nginx/ssl/certificate.crt;
        ssl_certificate_key /etc/nginx/ssl/certificate.key;
        ssl_session_timeout 1d; //ssl 핸드세이크 컴퓨팅 자원 소모 많음 그렇기에 하루 유지
        
        #SSL 세션 정보를 10MB 크기의 공유 메모리에 저장
        #여러 워커 프로세스가 세션 정보를 공유할 수 있어 캐시 효율이 높아
        ssl_session_cache shared:SSL:10m;

        #세션 티켓은 SSL 세션을 빠르게 재개하는 방법이지만, 잘못 구현될 경우 보안 취약점이 될 수 있음
        ssl_session_tickets off;
########################################################################

# SSL 세션 작동 방식:

# 클라이언트와 서버가 처음 연결할 때 복잡한 SSL 핸드셰이크를 수행합니다.
# 핸드셰이크가 성공하면 서버는 이 연결에 대한 "세션 ID"를 생성합니다.
# 서버는 이 세션 ID와 협상된 암호화 매개변수를 메모리에 저장합니다.
# 서버는 세션 ID를 클라이언트에게 전송합니다.
# 클라이언트가 나중에 다시 연결할 때, 이 세션 ID를 서버에 제시합니다.
# 서버는 ID를 확인하고, 유효하면 전체 핸드셰이크를 생략하고 빠르게 암호화 통신을 재개합니다.

# SSL 세션 캐시:

# 서버 측에 위치합니다(클라이언트가 아님).
# 여러 세션 ID(각 클라이언트들)와 관련 암호화 매개변수(어떻게암호화 할지 약속)를 저장하는 메모리 공간입니다.
# shared:SSL:10m은 10MB 크기의 공유 메모리 영역을 할당한다는 의미입니다.
# Nginx의 여러 워커 프로세스가 이 캐시에 접근할 수 있어 효율성이 높아집니다.

# 따라서 세션 정보는 서버에 저장되고, 클라이언트는 세션 ID만 저장하여 재연결 시 이를 서버에 제시합니다. 
# 서버의 세션 캐시에서 일치하는 세션 정보를 찾으면 빠른 재연결이 가능합니다.

########################################################################
        # 현대적인 TLS 설정 //클라이언트가 선호하는 암호화 방식을 사용하도록 설정 (통 좋은 암호화 방식을 선호하므로 권장)
        ssl_prefer_server_ciphers off;
        
        # OCSP Stapling : 
        #SSL 인증서의 유효성(취소 여부)을 확인하는 방법 중 하나로, 
        #인증서 발급기관(CA)가 제공하는 OCSP 서버에 직접 요청하여 인증서의 유효성을 확인하는 방법 (클라이언트에서 수행했음)
        # "이 인증서가 신뢰할 수 있는지"를 검증하는 과정을 클라이언트가 직접 수행하지 않고, 
        #서버가 대신 수행하여 클라이언트에게 제공하는 기능 : 연결속도가 빨라져
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # 보안 헤더
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # 루트 디렉토리 및 기본 파일
        root /var/www/html/wordpress;
        index index.php index.html;
        
        # 기본 위치 설정
        location / {
            try_files $uri $uri/ /index.php?$args;
        }
        
        # PHP 처리
        location ~ \.php$ {
            try_files $uri /index.php = 404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass wordpress:9000; #: PHP-FPM 서비스 연결 (필수)
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_intercept_errors on;
            fastcgi_buffer_size 128k;
            fastcgi_buffers 4 256k;
            fastcgi_busy_buffers_size 256k;
        }
        
        # 정적 파일 캐싱
        # 이미지, CSS, JS 파일에 대한 캐싱으로 로딩 속도 향상
        # 선택적이지만 성능 향상에 큰 도움이 됨
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
        
        # .htaccess 파일 접근 거부
        location ~ /\.ht {
            deny all;
        }
    }
# }
